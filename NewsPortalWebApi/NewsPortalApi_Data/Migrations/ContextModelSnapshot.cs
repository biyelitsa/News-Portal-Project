// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsPortalApi_Data.Concrete;

#nullable disable

namespace NewsPortalApi_Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WhoUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WhoUpdatedId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<int?>("WhoUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("WhoUpdatedId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int?>("WhoUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("WhoUpdatedId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WhoUpdatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WhoUpdatedId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Author", b =>
                {
                    b.HasOne("NewsPortalApi_Entities.Entities.Author", "WhoUpdated")
                        .WithMany()
                        .HasForeignKey("WhoUpdatedId");

                    b.Navigation("WhoUpdated");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Category", b =>
                {
                    b.HasOne("NewsPortalApi_Entities.Entities.News", null)
                        .WithMany("Categories")
                        .HasForeignKey("NewsId");

                    b.HasOne("NewsPortalApi_Entities.Entities.Author", "WhoUpdated")
                        .WithMany()
                        .HasForeignKey("WhoUpdatedId");

                    b.Navigation("WhoUpdated");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Comment", b =>
                {
                    b.HasOne("NewsPortalApi_Entities.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsPortalApi_Entities.Entities.Author", "WhoUpdated")
                        .WithMany()
                        .HasForeignKey("WhoUpdatedId");

                    b.Navigation("News");

                    b.Navigation("WhoUpdated");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.News", b =>
                {
                    b.HasOne("NewsPortalApi_Entities.Entities.Author", "Author")
                        .WithMany("News")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsPortalApi_Entities.Entities.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsPortalApi_Entities.Entities.Author", "WhoUpdated")
                        .WithMany()
                        .HasForeignKey("WhoUpdatedId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("WhoUpdated");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Author", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.Category", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("NewsPortalApi_Entities.Entities.News", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
